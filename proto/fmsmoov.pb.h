// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fmsmoov.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_fmsmoov_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_fmsmoov_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_fmsmoov_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_fmsmoov_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fmsmoov_2eproto;
namespace fmsmoov {
class ProcessorLiveData;
struct ProcessorLiveDataDefaultTypeInternal;
extern ProcessorLiveDataDefaultTypeInternal _ProcessorLiveData_default_instance_;
}  // namespace fmsmoov
PROTOBUF_NAMESPACE_OPEN
template<> ::fmsmoov::ProcessorLiveData* Arena::CreateMaybeMessage<::fmsmoov::ProcessorLiveData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fmsmoov {

// ===================================================================

class ProcessorLiveData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fmsmoov.ProcessorLiveData) */ {
 public:
  inline ProcessorLiveData() : ProcessorLiveData(nullptr) {}
  ~ProcessorLiveData() override;
  explicit constexpr ProcessorLiveData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessorLiveData(const ProcessorLiveData& from);
  ProcessorLiveData(ProcessorLiveData&& from) noexcept
    : ProcessorLiveData() {
    *this = ::std::move(from);
  }

  inline ProcessorLiveData& operator=(const ProcessorLiveData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessorLiveData& operator=(ProcessorLiveData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessorLiveData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessorLiveData* internal_default_instance() {
    return reinterpret_cast<const ProcessorLiveData*>(
               &_ProcessorLiveData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProcessorLiveData& a, ProcessorLiveData& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessorLiveData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessorLiveData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessorLiveData* New() const final {
    return new ProcessorLiveData();
  }

  ProcessorLiveData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessorLiveData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessorLiveData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProcessorLiveData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessorLiveData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fmsmoov.ProcessorLiveData";
  }
  protected:
  explicit ProcessorLiveData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInLFieldNumber = 1,
    kInRFieldNumber = 2,
    kOutLFieldNumber = 3,
    kOutRFieldNumber = 4,
  };
  // float inL = 1;
  void clear_inl();
  float inl() const;
  void set_inl(float value);
  private:
  float _internal_inl() const;
  void _internal_set_inl(float value);
  public:

  // float inR = 2;
  void clear_inr();
  float inr() const;
  void set_inr(float value);
  private:
  float _internal_inr() const;
  void _internal_set_inr(float value);
  public:

  // float outL = 3;
  void clear_outl();
  float outl() const;
  void set_outl(float value);
  private:
  float _internal_outl() const;
  void _internal_set_outl(float value);
  public:

  // float outR = 4;
  void clear_outr();
  float outr() const;
  void set_outr(float value);
  private:
  float _internal_outr() const;
  void _internal_set_outr(float value);
  public:

  // @@protoc_insertion_point(class_scope:fmsmoov.ProcessorLiveData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float inl_;
  float inr_;
  float outl_;
  float outr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fmsmoov_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProcessorLiveData

// float inL = 1;
inline void ProcessorLiveData::clear_inl() {
  inl_ = 0;
}
inline float ProcessorLiveData::_internal_inl() const {
  return inl_;
}
inline float ProcessorLiveData::inl() const {
  // @@protoc_insertion_point(field_get:fmsmoov.ProcessorLiveData.inL)
  return _internal_inl();
}
inline void ProcessorLiveData::_internal_set_inl(float value) {
  
  inl_ = value;
}
inline void ProcessorLiveData::set_inl(float value) {
  _internal_set_inl(value);
  // @@protoc_insertion_point(field_set:fmsmoov.ProcessorLiveData.inL)
}

// float inR = 2;
inline void ProcessorLiveData::clear_inr() {
  inr_ = 0;
}
inline float ProcessorLiveData::_internal_inr() const {
  return inr_;
}
inline float ProcessorLiveData::inr() const {
  // @@protoc_insertion_point(field_get:fmsmoov.ProcessorLiveData.inR)
  return _internal_inr();
}
inline void ProcessorLiveData::_internal_set_inr(float value) {
  
  inr_ = value;
}
inline void ProcessorLiveData::set_inr(float value) {
  _internal_set_inr(value);
  // @@protoc_insertion_point(field_set:fmsmoov.ProcessorLiveData.inR)
}

// float outL = 3;
inline void ProcessorLiveData::clear_outl() {
  outl_ = 0;
}
inline float ProcessorLiveData::_internal_outl() const {
  return outl_;
}
inline float ProcessorLiveData::outl() const {
  // @@protoc_insertion_point(field_get:fmsmoov.ProcessorLiveData.outL)
  return _internal_outl();
}
inline void ProcessorLiveData::_internal_set_outl(float value) {
  
  outl_ = value;
}
inline void ProcessorLiveData::set_outl(float value) {
  _internal_set_outl(value);
  // @@protoc_insertion_point(field_set:fmsmoov.ProcessorLiveData.outL)
}

// float outR = 4;
inline void ProcessorLiveData::clear_outr() {
  outr_ = 0;
}
inline float ProcessorLiveData::_internal_outr() const {
  return outr_;
}
inline float ProcessorLiveData::outr() const {
  // @@protoc_insertion_point(field_get:fmsmoov.ProcessorLiveData.outR)
  return _internal_outr();
}
inline void ProcessorLiveData::_internal_set_outr(float value) {
  
  outr_ = value;
}
inline void ProcessorLiveData::set_outr(float value) {
  _internal_set_outr(value);
  // @@protoc_insertion_point(field_set:fmsmoov.ProcessorLiveData.outR)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace fmsmoov

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_fmsmoov_2eproto
