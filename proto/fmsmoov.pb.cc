// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fmsmoov.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fmsmoov.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fmsmoov {
class GainPairDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GainPair> {
} _GainPair_default_instance_;
class ProcessorLiveDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProcessorLiveData> {
} _ProcessorLiveData_default_instance_;
class GainSetCommandDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GainSetCommand> {
  public:
  const ::fmsmoov::GainPair* gain_pair_;
  float gain_;
} _GainSetCommand_default_instance_;
class GainSetResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GainSetResponse> {
} _GainSetResponse_default_instance_;
class GainGetCommandDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GainGetCommand> {
} _GainGetCommand_default_instance_;
class GainGetResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GainGetResponse> {
  public:
  const ::fmsmoov::GainPair* gain_pair_;
  float gain_;
} _GainGetResponse_default_instance_;
class ProcessorCommandDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProcessorCommand> {
  public:
  const ::fmsmoov::GainSetCommand* gain_set_;
  const ::fmsmoov::GainGetCommand* gain_get_;
} _ProcessorCommand_default_instance_;
class ProcessorResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProcessorResponse> {
  public:
  const ::fmsmoov::GainSetResponse* gain_set_;
  const ::fmsmoov::GainGetResponse* gain_get_;
} _ProcessorResponse_default_instance_;

namespace protobuf_fmsmoov_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainPair, l_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainPair, r_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorLiveData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorLiveData, inl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorLiveData, inr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorLiveData, outl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorLiveData, outr_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainSetCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainSetCommand, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainSetCommand, which_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GainSetCommand_default_instance_), gain_pair_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GainSetCommand_default_instance_), gain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainSetCommand, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainSetCommand, gaintype_oneof_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainSetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainSetResponse, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainGetCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainGetCommand, which_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainGetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainGetResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainGetResponse, which_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GainGetResponse_default_instance_), gain_pair_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GainGetResponse_default_instance_), gain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainGetResponse, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainGetResponse, gaintype_oneof_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorCommand, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ProcessorCommand_default_instance_), gain_set_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ProcessorCommand_default_instance_), gain_get_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorCommand, cmd_oneof_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorResponse, response_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ProcessorResponse_default_instance_), gain_set_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ProcessorResponse_default_instance_), gain_get_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorResponse, rsp_oneof_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(GainPair)},
  { 7, -1, sizeof(ProcessorLiveData)},
  { 16, -1, sizeof(GainSetCommand)},
  { 26, -1, sizeof(GainSetResponse)},
  { 32, -1, sizeof(GainGetCommand)},
  { 38, -1, sizeof(GainGetResponse)},
  { 48, -1, sizeof(ProcessorCommand)},
  { 56, -1, sizeof(ProcessorResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_GainPair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProcessorLiveData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GainSetCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GainSetResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GainGetCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GainGetResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProcessorCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProcessorResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "fmsmoov.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

}  // namespace

void TableStruct::Shutdown() {
  _GainPair_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ProcessorLiveData_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _GainSetCommand_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _GainSetResponse_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _GainGetCommand_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _GainGetResponse_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _ProcessorCommand_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _ProcessorResponse_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _GainPair_default_instance_.DefaultConstruct();
  _ProcessorLiveData_default_instance_.DefaultConstruct();
  _GainSetCommand_default_instance_.DefaultConstruct();
  _GainSetResponse_default_instance_.DefaultConstruct();
  _GainGetCommand_default_instance_.DefaultConstruct();
  _GainGetResponse_default_instance_.DefaultConstruct();
  _ProcessorCommand_default_instance_.DefaultConstruct();
  _ProcessorResponse_default_instance_.DefaultConstruct();
  _GainSetCommand_default_instance_.gain_pair_ = const_cast< ::fmsmoov::GainPair*>(
      ::fmsmoov::GainPair::internal_default_instance());
  _GainSetCommand_default_instance_.gain_ = 0;
  _GainGetResponse_default_instance_.gain_pair_ = const_cast< ::fmsmoov::GainPair*>(
      ::fmsmoov::GainPair::internal_default_instance());
  _GainGetResponse_default_instance_.gain_ = 0;
  _ProcessorCommand_default_instance_.gain_set_ = const_cast< ::fmsmoov::GainSetCommand*>(
      ::fmsmoov::GainSetCommand::internal_default_instance());
  _ProcessorCommand_default_instance_.gain_get_ = const_cast< ::fmsmoov::GainGetCommand*>(
      ::fmsmoov::GainGetCommand::internal_default_instance());
  _ProcessorResponse_default_instance_.gain_set_ = const_cast< ::fmsmoov::GainSetResponse*>(
      ::fmsmoov::GainSetResponse::internal_default_instance());
  _ProcessorResponse_default_instance_.gain_get_ = const_cast< ::fmsmoov::GainGetResponse*>(
      ::fmsmoov::GainGetResponse::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rfmsmoov.proto\022\007fmsmoov\" \n\010GainPair\022\t\n\001"
      "l\030\001 \001(\002\022\t\n\001r\030\002 \001(\002\"I\n\021ProcessorLiveData\022"
      "\013\n\003inL\030\001 \001(\002\022\013\n\003inR\030\002 \001(\002\022\014\n\004outL\030\003 \001(\002\022"
      "\014\n\004outR\030\004 \001(\002\"\212\001\n\016GainSetCommand\022\r\n\005whic"
      "h\030\001 \001(\t\022&\n\tgain_pair\030\002 \001(\0132\021.fmsmoov.Gai"
      "nPairH\000\022\016\n\004gain\030\003 \001(\002H\000\022\037\n\004type\030\004 \001(\0162\021."
      "fmsmoov.GainTypeB\020\n\016gaintype_oneof\":\n\017Ga"
      "inSetResponse\022\'\n\010response\030\001 \001(\0162\025.fmsmoo"
      "v.ResponseCode\"\037\n\016GainGetCommand\022\r\n\005whic"
      "h\030\001 \001(\t\"\213\001\n\017GainGetResponse\022\r\n\005which\030\001 \001"
      "(\t\022&\n\tgain_pair\030\002 \001(\0132\021.fmsmoov.GainPair"
      "H\000\022\016\n\004gain\030\003 \001(\002H\000\022\037\n\004type\030\004 \001(\0162\021.fmsmo"
      "ov.GainTypeB\020\n\016gaintype_oneof\"y\n\020Process"
      "orCommand\022+\n\010gain_set\030\001 \001(\0132\027.fmsmoov.Ga"
      "inSetCommandH\000\022+\n\010gain_get\030\002 \001(\0132\027.fmsmo"
      "ov.GainGetCommandH\000B\013\n\tcmd_oneof\"\245\001\n\021Pro"
      "cessorResponse\022\'\n\010response\030\001 \001(\0162\025.fmsmo"
      "ov.ResponseCode\022,\n\010gain_set\030\002 \001(\0132\030.fmsm"
      "oov.GainSetResponseH\000\022,\n\010gain_get\030\003 \001(\0132"
      "\030.fmsmoov.GainGetResponseH\000B\013\n\trsp_oneof"
      "*\037\n\010GainType\022\n\n\006LINEAR\020\000\022\007\n\003LOG\020\001*!\n\014Res"
      "ponseCode\022\006\n\002OK\020\000\022\t\n\005ERROR\020\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 876);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fmsmoov.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_fmsmoov_2eproto

const ::google::protobuf::EnumDescriptor* GainType_descriptor() {
  protobuf_fmsmoov_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fmsmoov_2eproto::file_level_enum_descriptors[0];
}
bool GainType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ResponseCode_descriptor() {
  protobuf_fmsmoov_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fmsmoov_2eproto::file_level_enum_descriptors[1];
}
bool ResponseCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GainPair::kLFieldNumber;
const int GainPair::kRFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GainPair::GainPair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fmsmoov_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fmsmoov.GainPair)
}
GainPair::GainPair(const GainPair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&l_, &from.l_,
    reinterpret_cast<char*>(&r_) -
    reinterpret_cast<char*>(&l_) + sizeof(r_));
  // @@protoc_insertion_point(copy_constructor:fmsmoov.GainPair)
}

void GainPair::SharedCtor() {
  ::memset(&l_, 0, reinterpret_cast<char*>(&r_) -
    reinterpret_cast<char*>(&l_) + sizeof(r_));
  _cached_size_ = 0;
}

GainPair::~GainPair() {
  // @@protoc_insertion_point(destructor:fmsmoov.GainPair)
  SharedDtor();
}

void GainPair::SharedDtor() {
}

void GainPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GainPair::descriptor() {
  protobuf_fmsmoov_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fmsmoov_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GainPair& GainPair::default_instance() {
  protobuf_fmsmoov_2eproto::InitDefaults();
  return *internal_default_instance();
}

GainPair* GainPair::New(::google::protobuf::Arena* arena) const {
  GainPair* n = new GainPair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GainPair::Clear() {
// @@protoc_insertion_point(message_clear_start:fmsmoov.GainPair)
  ::memset(&l_, 0, reinterpret_cast<char*>(&r_) -
    reinterpret_cast<char*>(&l_) + sizeof(r_));
}

bool GainPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fmsmoov.GainPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float l = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float r = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fmsmoov.GainPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fmsmoov.GainPair)
  return false;
#undef DO_
}

void GainPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fmsmoov.GainPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float l = 1;
  if (this->l() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->l(), output);
  }

  // float r = 2;
  if (this->r() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->r(), output);
  }

  // @@protoc_insertion_point(serialize_end:fmsmoov.GainPair)
}

::google::protobuf::uint8* GainPair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fmsmoov.GainPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float l = 1;
  if (this->l() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->l(), target);
  }

  // float r = 2;
  if (this->r() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->r(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:fmsmoov.GainPair)
  return target;
}

size_t GainPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fmsmoov.GainPair)
  size_t total_size = 0;

  // float l = 1;
  if (this->l() != 0) {
    total_size += 1 + 4;
  }

  // float r = 2;
  if (this->r() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GainPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fmsmoov.GainPair)
  GOOGLE_DCHECK_NE(&from, this);
  const GainPair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GainPair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fmsmoov.GainPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fmsmoov.GainPair)
    MergeFrom(*source);
  }
}

void GainPair::MergeFrom(const GainPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fmsmoov.GainPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.l() != 0) {
    set_l(from.l());
  }
  if (from.r() != 0) {
    set_r(from.r());
  }
}

void GainPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fmsmoov.GainPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GainPair::CopyFrom(const GainPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fmsmoov.GainPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GainPair::IsInitialized() const {
  return true;
}

void GainPair::Swap(GainPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GainPair::InternalSwap(GainPair* other) {
  std::swap(l_, other->l_);
  std::swap(r_, other->r_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GainPair::GetMetadata() const {
  protobuf_fmsmoov_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fmsmoov_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GainPair

// float l = 1;
void GainPair::clear_l() {
  l_ = 0;
}
float GainPair::l() const {
  // @@protoc_insertion_point(field_get:fmsmoov.GainPair.l)
  return l_;
}
void GainPair::set_l(float value) {
  
  l_ = value;
  // @@protoc_insertion_point(field_set:fmsmoov.GainPair.l)
}

// float r = 2;
void GainPair::clear_r() {
  r_ = 0;
}
float GainPair::r() const {
  // @@protoc_insertion_point(field_get:fmsmoov.GainPair.r)
  return r_;
}
void GainPair::set_r(float value) {
  
  r_ = value;
  // @@protoc_insertion_point(field_set:fmsmoov.GainPair.r)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProcessorLiveData::kInLFieldNumber;
const int ProcessorLiveData::kInRFieldNumber;
const int ProcessorLiveData::kOutLFieldNumber;
const int ProcessorLiveData::kOutRFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProcessorLiveData::ProcessorLiveData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fmsmoov_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fmsmoov.ProcessorLiveData)
}
ProcessorLiveData::ProcessorLiveData(const ProcessorLiveData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&inl_, &from.inl_,
    reinterpret_cast<char*>(&outr_) -
    reinterpret_cast<char*>(&inl_) + sizeof(outr_));
  // @@protoc_insertion_point(copy_constructor:fmsmoov.ProcessorLiveData)
}

void ProcessorLiveData::SharedCtor() {
  ::memset(&inl_, 0, reinterpret_cast<char*>(&outr_) -
    reinterpret_cast<char*>(&inl_) + sizeof(outr_));
  _cached_size_ = 0;
}

ProcessorLiveData::~ProcessorLiveData() {
  // @@protoc_insertion_point(destructor:fmsmoov.ProcessorLiveData)
  SharedDtor();
}

void ProcessorLiveData::SharedDtor() {
}

void ProcessorLiveData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessorLiveData::descriptor() {
  protobuf_fmsmoov_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fmsmoov_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProcessorLiveData& ProcessorLiveData::default_instance() {
  protobuf_fmsmoov_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProcessorLiveData* ProcessorLiveData::New(::google::protobuf::Arena* arena) const {
  ProcessorLiveData* n = new ProcessorLiveData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProcessorLiveData::Clear() {
// @@protoc_insertion_point(message_clear_start:fmsmoov.ProcessorLiveData)
  ::memset(&inl_, 0, reinterpret_cast<char*>(&outr_) -
    reinterpret_cast<char*>(&inl_) + sizeof(outr_));
}

bool ProcessorLiveData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fmsmoov.ProcessorLiveData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float inL = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &inl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float inR = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &inr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float outL = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &outl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float outR = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &outr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fmsmoov.ProcessorLiveData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fmsmoov.ProcessorLiveData)
  return false;
#undef DO_
}

void ProcessorLiveData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fmsmoov.ProcessorLiveData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float inL = 1;
  if (this->inl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->inl(), output);
  }

  // float inR = 2;
  if (this->inr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->inr(), output);
  }

  // float outL = 3;
  if (this->outl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->outl(), output);
  }

  // float outR = 4;
  if (this->outr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->outr(), output);
  }

  // @@protoc_insertion_point(serialize_end:fmsmoov.ProcessorLiveData)
}

::google::protobuf::uint8* ProcessorLiveData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fmsmoov.ProcessorLiveData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float inL = 1;
  if (this->inl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->inl(), target);
  }

  // float inR = 2;
  if (this->inr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->inr(), target);
  }

  // float outL = 3;
  if (this->outl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->outl(), target);
  }

  // float outR = 4;
  if (this->outr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->outr(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:fmsmoov.ProcessorLiveData)
  return target;
}

size_t ProcessorLiveData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fmsmoov.ProcessorLiveData)
  size_t total_size = 0;

  // float inL = 1;
  if (this->inl() != 0) {
    total_size += 1 + 4;
  }

  // float inR = 2;
  if (this->inr() != 0) {
    total_size += 1 + 4;
  }

  // float outL = 3;
  if (this->outl() != 0) {
    total_size += 1 + 4;
  }

  // float outR = 4;
  if (this->outr() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessorLiveData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fmsmoov.ProcessorLiveData)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessorLiveData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProcessorLiveData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fmsmoov.ProcessorLiveData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fmsmoov.ProcessorLiveData)
    MergeFrom(*source);
  }
}

void ProcessorLiveData::MergeFrom(const ProcessorLiveData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fmsmoov.ProcessorLiveData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.inl() != 0) {
    set_inl(from.inl());
  }
  if (from.inr() != 0) {
    set_inr(from.inr());
  }
  if (from.outl() != 0) {
    set_outl(from.outl());
  }
  if (from.outr() != 0) {
    set_outr(from.outr());
  }
}

void ProcessorLiveData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fmsmoov.ProcessorLiveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessorLiveData::CopyFrom(const ProcessorLiveData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fmsmoov.ProcessorLiveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessorLiveData::IsInitialized() const {
  return true;
}

void ProcessorLiveData::Swap(ProcessorLiveData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProcessorLiveData::InternalSwap(ProcessorLiveData* other) {
  std::swap(inl_, other->inl_);
  std::swap(inr_, other->inr_);
  std::swap(outl_, other->outl_);
  std::swap(outr_, other->outr_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProcessorLiveData::GetMetadata() const {
  protobuf_fmsmoov_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fmsmoov_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProcessorLiveData

// float inL = 1;
void ProcessorLiveData::clear_inl() {
  inl_ = 0;
}
float ProcessorLiveData::inl() const {
  // @@protoc_insertion_point(field_get:fmsmoov.ProcessorLiveData.inL)
  return inl_;
}
void ProcessorLiveData::set_inl(float value) {
  
  inl_ = value;
  // @@protoc_insertion_point(field_set:fmsmoov.ProcessorLiveData.inL)
}

// float inR = 2;
void ProcessorLiveData::clear_inr() {
  inr_ = 0;
}
float ProcessorLiveData::inr() const {
  // @@protoc_insertion_point(field_get:fmsmoov.ProcessorLiveData.inR)
  return inr_;
}
void ProcessorLiveData::set_inr(float value) {
  
  inr_ = value;
  // @@protoc_insertion_point(field_set:fmsmoov.ProcessorLiveData.inR)
}

// float outL = 3;
void ProcessorLiveData::clear_outl() {
  outl_ = 0;
}
float ProcessorLiveData::outl() const {
  // @@protoc_insertion_point(field_get:fmsmoov.ProcessorLiveData.outL)
  return outl_;
}
void ProcessorLiveData::set_outl(float value) {
  
  outl_ = value;
  // @@protoc_insertion_point(field_set:fmsmoov.ProcessorLiveData.outL)
}

// float outR = 4;
void ProcessorLiveData::clear_outr() {
  outr_ = 0;
}
float ProcessorLiveData::outr() const {
  // @@protoc_insertion_point(field_get:fmsmoov.ProcessorLiveData.outR)
  return outr_;
}
void ProcessorLiveData::set_outr(float value) {
  
  outr_ = value;
  // @@protoc_insertion_point(field_set:fmsmoov.ProcessorLiveData.outR)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GainSetCommand::kWhichFieldNumber;
const int GainSetCommand::kGainPairFieldNumber;
const int GainSetCommand::kGainFieldNumber;
const int GainSetCommand::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GainSetCommand::GainSetCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fmsmoov_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fmsmoov.GainSetCommand)
}
GainSetCommand::GainSetCommand(const GainSetCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  which_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.which().size() > 0) {
    which_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.which_);
  }
  type_ = from.type_;
  clear_has_gaintype_oneof();
  switch (from.gaintype_oneof_case()) {
    case kGainPair: {
      mutable_gain_pair()->::fmsmoov::GainPair::MergeFrom(from.gain_pair());
      break;
    }
    case kGain: {
      set_gain(from.gain());
      break;
    }
    case GAINTYPE_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:fmsmoov.GainSetCommand)
}

void GainSetCommand::SharedCtor() {
  which_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  clear_has_gaintype_oneof();
  _cached_size_ = 0;
}

GainSetCommand::~GainSetCommand() {
  // @@protoc_insertion_point(destructor:fmsmoov.GainSetCommand)
  SharedDtor();
}

void GainSetCommand::SharedDtor() {
  which_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_gaintype_oneof()) {
    clear_gaintype_oneof();
  }
}

void GainSetCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GainSetCommand::descriptor() {
  protobuf_fmsmoov_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fmsmoov_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GainSetCommand& GainSetCommand::default_instance() {
  protobuf_fmsmoov_2eproto::InitDefaults();
  return *internal_default_instance();
}

GainSetCommand* GainSetCommand::New(::google::protobuf::Arena* arena) const {
  GainSetCommand* n = new GainSetCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GainSetCommand::clear_gaintype_oneof() {
// @@protoc_insertion_point(one_of_clear_start:fmsmoov.GainSetCommand)
  switch (gaintype_oneof_case()) {
    case kGainPair: {
      delete gaintype_oneof_.gain_pair_;
      break;
    }
    case kGain: {
      // No need to clear
      break;
    }
    case GAINTYPE_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = GAINTYPE_ONEOF_NOT_SET;
}


void GainSetCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:fmsmoov.GainSetCommand)
  which_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  clear_gaintype_oneof();
}

bool GainSetCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fmsmoov.GainSetCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string which = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_which()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->which().data(), this->which().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fmsmoov.GainSetCommand.which"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fmsmoov.GainPair gain_pair = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gain_pair()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float gain = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          clear_gaintype_oneof();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gaintype_oneof_.gain_)));
          set_has_gain();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fmsmoov.GainType type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::fmsmoov::GainType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fmsmoov.GainSetCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fmsmoov.GainSetCommand)
  return false;
#undef DO_
}

void GainSetCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fmsmoov.GainSetCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string which = 1;
  if (this->which().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->which().data(), this->which().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fmsmoov.GainSetCommand.which");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->which(), output);
  }

  // .fmsmoov.GainPair gain_pair = 2;
  if (has_gain_pair()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *gaintype_oneof_.gain_pair_, output);
  }

  // float gain = 3;
  if (has_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->gain(), output);
  }

  // .fmsmoov.GainType type = 4;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:fmsmoov.GainSetCommand)
}

::google::protobuf::uint8* GainSetCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fmsmoov.GainSetCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string which = 1;
  if (this->which().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->which().data(), this->which().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fmsmoov.GainSetCommand.which");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->which(), target);
  }

  // .fmsmoov.GainPair gain_pair = 2;
  if (has_gain_pair()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *gaintype_oneof_.gain_pair_, deterministic, target);
  }

  // float gain = 3;
  if (has_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->gain(), target);
  }

  // .fmsmoov.GainType type = 4;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:fmsmoov.GainSetCommand)
  return target;
}

size_t GainSetCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fmsmoov.GainSetCommand)
  size_t total_size = 0;

  // string which = 1;
  if (this->which().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->which());
  }

  // .fmsmoov.GainType type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  switch (gaintype_oneof_case()) {
    // .fmsmoov.GainPair gain_pair = 2;
    case kGainPair: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *gaintype_oneof_.gain_pair_);
      break;
    }
    // float gain = 3;
    case kGain: {
      total_size += 1 + 4;
      break;
    }
    case GAINTYPE_ONEOF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GainSetCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fmsmoov.GainSetCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const GainSetCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GainSetCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fmsmoov.GainSetCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fmsmoov.GainSetCommand)
    MergeFrom(*source);
  }
}

void GainSetCommand::MergeFrom(const GainSetCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fmsmoov.GainSetCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.which().size() > 0) {

    which_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.which_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  switch (from.gaintype_oneof_case()) {
    case kGainPair: {
      mutable_gain_pair()->::fmsmoov::GainPair::MergeFrom(from.gain_pair());
      break;
    }
    case kGain: {
      set_gain(from.gain());
      break;
    }
    case GAINTYPE_ONEOF_NOT_SET: {
      break;
    }
  }
}

void GainSetCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fmsmoov.GainSetCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GainSetCommand::CopyFrom(const GainSetCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fmsmoov.GainSetCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GainSetCommand::IsInitialized() const {
  return true;
}

void GainSetCommand::Swap(GainSetCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GainSetCommand::InternalSwap(GainSetCommand* other) {
  which_.Swap(&other->which_);
  std::swap(type_, other->type_);
  std::swap(gaintype_oneof_, other->gaintype_oneof_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GainSetCommand::GetMetadata() const {
  protobuf_fmsmoov_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fmsmoov_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GainSetCommand

// string which = 1;
void GainSetCommand::clear_which() {
  which_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GainSetCommand::which() const {
  // @@protoc_insertion_point(field_get:fmsmoov.GainSetCommand.which)
  return which_.GetNoArena();
}
void GainSetCommand::set_which(const ::std::string& value) {
  
  which_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fmsmoov.GainSetCommand.which)
}
#if LANG_CXX11
void GainSetCommand::set_which(::std::string&& value) {
  
  which_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fmsmoov.GainSetCommand.which)
}
#endif
void GainSetCommand::set_which(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  which_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fmsmoov.GainSetCommand.which)
}
void GainSetCommand::set_which(const char* value, size_t size) {
  
  which_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fmsmoov.GainSetCommand.which)
}
::std::string* GainSetCommand::mutable_which() {
  
  // @@protoc_insertion_point(field_mutable:fmsmoov.GainSetCommand.which)
  return which_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GainSetCommand::release_which() {
  // @@protoc_insertion_point(field_release:fmsmoov.GainSetCommand.which)
  
  return which_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GainSetCommand::set_allocated_which(::std::string* which) {
  if (which != NULL) {
    
  } else {
    
  }
  which_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), which);
  // @@protoc_insertion_point(field_set_allocated:fmsmoov.GainSetCommand.which)
}

// .fmsmoov.GainPair gain_pair = 2;
bool GainSetCommand::has_gain_pair() const {
  return gaintype_oneof_case() == kGainPair;
}
void GainSetCommand::set_has_gain_pair() {
  _oneof_case_[0] = kGainPair;
}
void GainSetCommand::clear_gain_pair() {
  if (has_gain_pair()) {
    delete gaintype_oneof_.gain_pair_;
    clear_has_gaintype_oneof();
  }
}
 const ::fmsmoov::GainPair& GainSetCommand::gain_pair() const {
  // @@protoc_insertion_point(field_get:fmsmoov.GainSetCommand.gain_pair)
  return has_gain_pair()
      ? *gaintype_oneof_.gain_pair_
      : ::fmsmoov::GainPair::default_instance();
}
::fmsmoov::GainPair* GainSetCommand::mutable_gain_pair() {
  if (!has_gain_pair()) {
    clear_gaintype_oneof();
    set_has_gain_pair();
    gaintype_oneof_.gain_pair_ = new ::fmsmoov::GainPair;
  }
  // @@protoc_insertion_point(field_mutable:fmsmoov.GainSetCommand.gain_pair)
  return gaintype_oneof_.gain_pair_;
}
::fmsmoov::GainPair* GainSetCommand::release_gain_pair() {
  // @@protoc_insertion_point(field_release:fmsmoov.GainSetCommand.gain_pair)
  if (has_gain_pair()) {
    clear_has_gaintype_oneof();
    ::fmsmoov::GainPair* temp = gaintype_oneof_.gain_pair_;
    gaintype_oneof_.gain_pair_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GainSetCommand::set_allocated_gain_pair(::fmsmoov::GainPair* gain_pair) {
  clear_gaintype_oneof();
  if (gain_pair) {
    set_has_gain_pair();
    gaintype_oneof_.gain_pair_ = gain_pair;
  }
  // @@protoc_insertion_point(field_set_allocated:fmsmoov.GainSetCommand.gain_pair)
}

// float gain = 3;
bool GainSetCommand::has_gain() const {
  return gaintype_oneof_case() == kGain;
}
void GainSetCommand::set_has_gain() {
  _oneof_case_[0] = kGain;
}
void GainSetCommand::clear_gain() {
  if (has_gain()) {
    gaintype_oneof_.gain_ = 0;
    clear_has_gaintype_oneof();
  }
}
float GainSetCommand::gain() const {
  // @@protoc_insertion_point(field_get:fmsmoov.GainSetCommand.gain)
  if (has_gain()) {
    return gaintype_oneof_.gain_;
  }
  return 0;
}
void GainSetCommand::set_gain(float value) {
  if (!has_gain()) {
    clear_gaintype_oneof();
    set_has_gain();
  }
  gaintype_oneof_.gain_ = value;
  // @@protoc_insertion_point(field_set:fmsmoov.GainSetCommand.gain)
}

// .fmsmoov.GainType type = 4;
void GainSetCommand::clear_type() {
  type_ = 0;
}
::fmsmoov::GainType GainSetCommand::type() const {
  // @@protoc_insertion_point(field_get:fmsmoov.GainSetCommand.type)
  return static_cast< ::fmsmoov::GainType >(type_);
}
void GainSetCommand::set_type(::fmsmoov::GainType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:fmsmoov.GainSetCommand.type)
}

bool GainSetCommand::has_gaintype_oneof() const {
  return gaintype_oneof_case() != GAINTYPE_ONEOF_NOT_SET;
}
void GainSetCommand::clear_has_gaintype_oneof() {
  _oneof_case_[0] = GAINTYPE_ONEOF_NOT_SET;
}
GainSetCommand::GaintypeOneofCase GainSetCommand::gaintype_oneof_case() const {
  return GainSetCommand::GaintypeOneofCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GainSetResponse::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GainSetResponse::GainSetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fmsmoov_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fmsmoov.GainSetResponse)
}
GainSetResponse::GainSetResponse(const GainSetResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  response_ = from.response_;
  // @@protoc_insertion_point(copy_constructor:fmsmoov.GainSetResponse)
}

void GainSetResponse::SharedCtor() {
  response_ = 0;
  _cached_size_ = 0;
}

GainSetResponse::~GainSetResponse() {
  // @@protoc_insertion_point(destructor:fmsmoov.GainSetResponse)
  SharedDtor();
}

void GainSetResponse::SharedDtor() {
}

void GainSetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GainSetResponse::descriptor() {
  protobuf_fmsmoov_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fmsmoov_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GainSetResponse& GainSetResponse::default_instance() {
  protobuf_fmsmoov_2eproto::InitDefaults();
  return *internal_default_instance();
}

GainSetResponse* GainSetResponse::New(::google::protobuf::Arena* arena) const {
  GainSetResponse* n = new GainSetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GainSetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fmsmoov.GainSetResponse)
  response_ = 0;
}

bool GainSetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fmsmoov.GainSetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .fmsmoov.ResponseCode response = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_response(static_cast< ::fmsmoov::ResponseCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fmsmoov.GainSetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fmsmoov.GainSetResponse)
  return false;
#undef DO_
}

void GainSetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fmsmoov.GainSetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fmsmoov.ResponseCode response = 1;
  if (this->response() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->response(), output);
  }

  // @@protoc_insertion_point(serialize_end:fmsmoov.GainSetResponse)
}

::google::protobuf::uint8* GainSetResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fmsmoov.GainSetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fmsmoov.ResponseCode response = 1;
  if (this->response() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->response(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:fmsmoov.GainSetResponse)
  return target;
}

size_t GainSetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fmsmoov.GainSetResponse)
  size_t total_size = 0;

  // .fmsmoov.ResponseCode response = 1;
  if (this->response() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->response());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GainSetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fmsmoov.GainSetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GainSetResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GainSetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fmsmoov.GainSetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fmsmoov.GainSetResponse)
    MergeFrom(*source);
  }
}

void GainSetResponse::MergeFrom(const GainSetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fmsmoov.GainSetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.response() != 0) {
    set_response(from.response());
  }
}

void GainSetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fmsmoov.GainSetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GainSetResponse::CopyFrom(const GainSetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fmsmoov.GainSetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GainSetResponse::IsInitialized() const {
  return true;
}

void GainSetResponse::Swap(GainSetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GainSetResponse::InternalSwap(GainSetResponse* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GainSetResponse::GetMetadata() const {
  protobuf_fmsmoov_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fmsmoov_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GainSetResponse

// .fmsmoov.ResponseCode response = 1;
void GainSetResponse::clear_response() {
  response_ = 0;
}
::fmsmoov::ResponseCode GainSetResponse::response() const {
  // @@protoc_insertion_point(field_get:fmsmoov.GainSetResponse.response)
  return static_cast< ::fmsmoov::ResponseCode >(response_);
}
void GainSetResponse::set_response(::fmsmoov::ResponseCode value) {
  
  response_ = value;
  // @@protoc_insertion_point(field_set:fmsmoov.GainSetResponse.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GainGetCommand::kWhichFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GainGetCommand::GainGetCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fmsmoov_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fmsmoov.GainGetCommand)
}
GainGetCommand::GainGetCommand(const GainGetCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  which_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.which().size() > 0) {
    which_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.which_);
  }
  // @@protoc_insertion_point(copy_constructor:fmsmoov.GainGetCommand)
}

void GainGetCommand::SharedCtor() {
  which_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GainGetCommand::~GainGetCommand() {
  // @@protoc_insertion_point(destructor:fmsmoov.GainGetCommand)
  SharedDtor();
}

void GainGetCommand::SharedDtor() {
  which_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GainGetCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GainGetCommand::descriptor() {
  protobuf_fmsmoov_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fmsmoov_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GainGetCommand& GainGetCommand::default_instance() {
  protobuf_fmsmoov_2eproto::InitDefaults();
  return *internal_default_instance();
}

GainGetCommand* GainGetCommand::New(::google::protobuf::Arena* arena) const {
  GainGetCommand* n = new GainGetCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GainGetCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:fmsmoov.GainGetCommand)
  which_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GainGetCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fmsmoov.GainGetCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string which = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_which()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->which().data(), this->which().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fmsmoov.GainGetCommand.which"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fmsmoov.GainGetCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fmsmoov.GainGetCommand)
  return false;
#undef DO_
}

void GainGetCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fmsmoov.GainGetCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string which = 1;
  if (this->which().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->which().data(), this->which().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fmsmoov.GainGetCommand.which");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->which(), output);
  }

  // @@protoc_insertion_point(serialize_end:fmsmoov.GainGetCommand)
}

::google::protobuf::uint8* GainGetCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fmsmoov.GainGetCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string which = 1;
  if (this->which().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->which().data(), this->which().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fmsmoov.GainGetCommand.which");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->which(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:fmsmoov.GainGetCommand)
  return target;
}

size_t GainGetCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fmsmoov.GainGetCommand)
  size_t total_size = 0;

  // string which = 1;
  if (this->which().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->which());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GainGetCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fmsmoov.GainGetCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const GainGetCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GainGetCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fmsmoov.GainGetCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fmsmoov.GainGetCommand)
    MergeFrom(*source);
  }
}

void GainGetCommand::MergeFrom(const GainGetCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fmsmoov.GainGetCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.which().size() > 0) {

    which_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.which_);
  }
}

void GainGetCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fmsmoov.GainGetCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GainGetCommand::CopyFrom(const GainGetCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fmsmoov.GainGetCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GainGetCommand::IsInitialized() const {
  return true;
}

void GainGetCommand::Swap(GainGetCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GainGetCommand::InternalSwap(GainGetCommand* other) {
  which_.Swap(&other->which_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GainGetCommand::GetMetadata() const {
  protobuf_fmsmoov_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fmsmoov_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GainGetCommand

// string which = 1;
void GainGetCommand::clear_which() {
  which_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GainGetCommand::which() const {
  // @@protoc_insertion_point(field_get:fmsmoov.GainGetCommand.which)
  return which_.GetNoArena();
}
void GainGetCommand::set_which(const ::std::string& value) {
  
  which_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fmsmoov.GainGetCommand.which)
}
#if LANG_CXX11
void GainGetCommand::set_which(::std::string&& value) {
  
  which_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fmsmoov.GainGetCommand.which)
}
#endif
void GainGetCommand::set_which(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  which_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fmsmoov.GainGetCommand.which)
}
void GainGetCommand::set_which(const char* value, size_t size) {
  
  which_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fmsmoov.GainGetCommand.which)
}
::std::string* GainGetCommand::mutable_which() {
  
  // @@protoc_insertion_point(field_mutable:fmsmoov.GainGetCommand.which)
  return which_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GainGetCommand::release_which() {
  // @@protoc_insertion_point(field_release:fmsmoov.GainGetCommand.which)
  
  return which_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GainGetCommand::set_allocated_which(::std::string* which) {
  if (which != NULL) {
    
  } else {
    
  }
  which_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), which);
  // @@protoc_insertion_point(field_set_allocated:fmsmoov.GainGetCommand.which)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GainGetResponse::kWhichFieldNumber;
const int GainGetResponse::kGainPairFieldNumber;
const int GainGetResponse::kGainFieldNumber;
const int GainGetResponse::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GainGetResponse::GainGetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fmsmoov_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fmsmoov.GainGetResponse)
}
GainGetResponse::GainGetResponse(const GainGetResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  which_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.which().size() > 0) {
    which_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.which_);
  }
  type_ = from.type_;
  clear_has_gaintype_oneof();
  switch (from.gaintype_oneof_case()) {
    case kGainPair: {
      mutable_gain_pair()->::fmsmoov::GainPair::MergeFrom(from.gain_pair());
      break;
    }
    case kGain: {
      set_gain(from.gain());
      break;
    }
    case GAINTYPE_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:fmsmoov.GainGetResponse)
}

void GainGetResponse::SharedCtor() {
  which_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  clear_has_gaintype_oneof();
  _cached_size_ = 0;
}

GainGetResponse::~GainGetResponse() {
  // @@protoc_insertion_point(destructor:fmsmoov.GainGetResponse)
  SharedDtor();
}

void GainGetResponse::SharedDtor() {
  which_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_gaintype_oneof()) {
    clear_gaintype_oneof();
  }
}

void GainGetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GainGetResponse::descriptor() {
  protobuf_fmsmoov_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fmsmoov_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GainGetResponse& GainGetResponse::default_instance() {
  protobuf_fmsmoov_2eproto::InitDefaults();
  return *internal_default_instance();
}

GainGetResponse* GainGetResponse::New(::google::protobuf::Arena* arena) const {
  GainGetResponse* n = new GainGetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GainGetResponse::clear_gaintype_oneof() {
// @@protoc_insertion_point(one_of_clear_start:fmsmoov.GainGetResponse)
  switch (gaintype_oneof_case()) {
    case kGainPair: {
      delete gaintype_oneof_.gain_pair_;
      break;
    }
    case kGain: {
      // No need to clear
      break;
    }
    case GAINTYPE_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = GAINTYPE_ONEOF_NOT_SET;
}


void GainGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fmsmoov.GainGetResponse)
  which_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  clear_gaintype_oneof();
}

bool GainGetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fmsmoov.GainGetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string which = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_which()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->which().data(), this->which().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fmsmoov.GainGetResponse.which"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fmsmoov.GainPair gain_pair = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gain_pair()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float gain = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          clear_gaintype_oneof();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gaintype_oneof_.gain_)));
          set_has_gain();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fmsmoov.GainType type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::fmsmoov::GainType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fmsmoov.GainGetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fmsmoov.GainGetResponse)
  return false;
#undef DO_
}

void GainGetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fmsmoov.GainGetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string which = 1;
  if (this->which().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->which().data(), this->which().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fmsmoov.GainGetResponse.which");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->which(), output);
  }

  // .fmsmoov.GainPair gain_pair = 2;
  if (has_gain_pair()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *gaintype_oneof_.gain_pair_, output);
  }

  // float gain = 3;
  if (has_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->gain(), output);
  }

  // .fmsmoov.GainType type = 4;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:fmsmoov.GainGetResponse)
}

::google::protobuf::uint8* GainGetResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fmsmoov.GainGetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string which = 1;
  if (this->which().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->which().data(), this->which().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fmsmoov.GainGetResponse.which");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->which(), target);
  }

  // .fmsmoov.GainPair gain_pair = 2;
  if (has_gain_pair()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *gaintype_oneof_.gain_pair_, deterministic, target);
  }

  // float gain = 3;
  if (has_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->gain(), target);
  }

  // .fmsmoov.GainType type = 4;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:fmsmoov.GainGetResponse)
  return target;
}

size_t GainGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fmsmoov.GainGetResponse)
  size_t total_size = 0;

  // string which = 1;
  if (this->which().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->which());
  }

  // .fmsmoov.GainType type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  switch (gaintype_oneof_case()) {
    // .fmsmoov.GainPair gain_pair = 2;
    case kGainPair: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *gaintype_oneof_.gain_pair_);
      break;
    }
    // float gain = 3;
    case kGain: {
      total_size += 1 + 4;
      break;
    }
    case GAINTYPE_ONEOF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GainGetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fmsmoov.GainGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GainGetResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GainGetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fmsmoov.GainGetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fmsmoov.GainGetResponse)
    MergeFrom(*source);
  }
}

void GainGetResponse::MergeFrom(const GainGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fmsmoov.GainGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.which().size() > 0) {

    which_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.which_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  switch (from.gaintype_oneof_case()) {
    case kGainPair: {
      mutable_gain_pair()->::fmsmoov::GainPair::MergeFrom(from.gain_pair());
      break;
    }
    case kGain: {
      set_gain(from.gain());
      break;
    }
    case GAINTYPE_ONEOF_NOT_SET: {
      break;
    }
  }
}

void GainGetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fmsmoov.GainGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GainGetResponse::CopyFrom(const GainGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fmsmoov.GainGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GainGetResponse::IsInitialized() const {
  return true;
}

void GainGetResponse::Swap(GainGetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GainGetResponse::InternalSwap(GainGetResponse* other) {
  which_.Swap(&other->which_);
  std::swap(type_, other->type_);
  std::swap(gaintype_oneof_, other->gaintype_oneof_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GainGetResponse::GetMetadata() const {
  protobuf_fmsmoov_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fmsmoov_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GainGetResponse

// string which = 1;
void GainGetResponse::clear_which() {
  which_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GainGetResponse::which() const {
  // @@protoc_insertion_point(field_get:fmsmoov.GainGetResponse.which)
  return which_.GetNoArena();
}
void GainGetResponse::set_which(const ::std::string& value) {
  
  which_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fmsmoov.GainGetResponse.which)
}
#if LANG_CXX11
void GainGetResponse::set_which(::std::string&& value) {
  
  which_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fmsmoov.GainGetResponse.which)
}
#endif
void GainGetResponse::set_which(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  which_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fmsmoov.GainGetResponse.which)
}
void GainGetResponse::set_which(const char* value, size_t size) {
  
  which_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fmsmoov.GainGetResponse.which)
}
::std::string* GainGetResponse::mutable_which() {
  
  // @@protoc_insertion_point(field_mutable:fmsmoov.GainGetResponse.which)
  return which_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GainGetResponse::release_which() {
  // @@protoc_insertion_point(field_release:fmsmoov.GainGetResponse.which)
  
  return which_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GainGetResponse::set_allocated_which(::std::string* which) {
  if (which != NULL) {
    
  } else {
    
  }
  which_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), which);
  // @@protoc_insertion_point(field_set_allocated:fmsmoov.GainGetResponse.which)
}

// .fmsmoov.GainPair gain_pair = 2;
bool GainGetResponse::has_gain_pair() const {
  return gaintype_oneof_case() == kGainPair;
}
void GainGetResponse::set_has_gain_pair() {
  _oneof_case_[0] = kGainPair;
}
void GainGetResponse::clear_gain_pair() {
  if (has_gain_pair()) {
    delete gaintype_oneof_.gain_pair_;
    clear_has_gaintype_oneof();
  }
}
 const ::fmsmoov::GainPair& GainGetResponse::gain_pair() const {
  // @@protoc_insertion_point(field_get:fmsmoov.GainGetResponse.gain_pair)
  return has_gain_pair()
      ? *gaintype_oneof_.gain_pair_
      : ::fmsmoov::GainPair::default_instance();
}
::fmsmoov::GainPair* GainGetResponse::mutable_gain_pair() {
  if (!has_gain_pair()) {
    clear_gaintype_oneof();
    set_has_gain_pair();
    gaintype_oneof_.gain_pair_ = new ::fmsmoov::GainPair;
  }
  // @@protoc_insertion_point(field_mutable:fmsmoov.GainGetResponse.gain_pair)
  return gaintype_oneof_.gain_pair_;
}
::fmsmoov::GainPair* GainGetResponse::release_gain_pair() {
  // @@protoc_insertion_point(field_release:fmsmoov.GainGetResponse.gain_pair)
  if (has_gain_pair()) {
    clear_has_gaintype_oneof();
    ::fmsmoov::GainPair* temp = gaintype_oneof_.gain_pair_;
    gaintype_oneof_.gain_pair_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GainGetResponse::set_allocated_gain_pair(::fmsmoov::GainPair* gain_pair) {
  clear_gaintype_oneof();
  if (gain_pair) {
    set_has_gain_pair();
    gaintype_oneof_.gain_pair_ = gain_pair;
  }
  // @@protoc_insertion_point(field_set_allocated:fmsmoov.GainGetResponse.gain_pair)
}

// float gain = 3;
bool GainGetResponse::has_gain() const {
  return gaintype_oneof_case() == kGain;
}
void GainGetResponse::set_has_gain() {
  _oneof_case_[0] = kGain;
}
void GainGetResponse::clear_gain() {
  if (has_gain()) {
    gaintype_oneof_.gain_ = 0;
    clear_has_gaintype_oneof();
  }
}
float GainGetResponse::gain() const {
  // @@protoc_insertion_point(field_get:fmsmoov.GainGetResponse.gain)
  if (has_gain()) {
    return gaintype_oneof_.gain_;
  }
  return 0;
}
void GainGetResponse::set_gain(float value) {
  if (!has_gain()) {
    clear_gaintype_oneof();
    set_has_gain();
  }
  gaintype_oneof_.gain_ = value;
  // @@protoc_insertion_point(field_set:fmsmoov.GainGetResponse.gain)
}

// .fmsmoov.GainType type = 4;
void GainGetResponse::clear_type() {
  type_ = 0;
}
::fmsmoov::GainType GainGetResponse::type() const {
  // @@protoc_insertion_point(field_get:fmsmoov.GainGetResponse.type)
  return static_cast< ::fmsmoov::GainType >(type_);
}
void GainGetResponse::set_type(::fmsmoov::GainType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:fmsmoov.GainGetResponse.type)
}

bool GainGetResponse::has_gaintype_oneof() const {
  return gaintype_oneof_case() != GAINTYPE_ONEOF_NOT_SET;
}
void GainGetResponse::clear_has_gaintype_oneof() {
  _oneof_case_[0] = GAINTYPE_ONEOF_NOT_SET;
}
GainGetResponse::GaintypeOneofCase GainGetResponse::gaintype_oneof_case() const {
  return GainGetResponse::GaintypeOneofCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProcessorCommand::kGainSetFieldNumber;
const int ProcessorCommand::kGainGetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProcessorCommand::ProcessorCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fmsmoov_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fmsmoov.ProcessorCommand)
}
ProcessorCommand::ProcessorCommand(const ProcessorCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_cmd_oneof();
  switch (from.cmd_oneof_case()) {
    case kGainSet: {
      mutable_gain_set()->::fmsmoov::GainSetCommand::MergeFrom(from.gain_set());
      break;
    }
    case kGainGet: {
      mutable_gain_get()->::fmsmoov::GainGetCommand::MergeFrom(from.gain_get());
      break;
    }
    case CMD_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:fmsmoov.ProcessorCommand)
}

void ProcessorCommand::SharedCtor() {
  clear_has_cmd_oneof();
  _cached_size_ = 0;
}

ProcessorCommand::~ProcessorCommand() {
  // @@protoc_insertion_point(destructor:fmsmoov.ProcessorCommand)
  SharedDtor();
}

void ProcessorCommand::SharedDtor() {
  if (has_cmd_oneof()) {
    clear_cmd_oneof();
  }
}

void ProcessorCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessorCommand::descriptor() {
  protobuf_fmsmoov_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fmsmoov_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProcessorCommand& ProcessorCommand::default_instance() {
  protobuf_fmsmoov_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProcessorCommand* ProcessorCommand::New(::google::protobuf::Arena* arena) const {
  ProcessorCommand* n = new ProcessorCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProcessorCommand::clear_cmd_oneof() {
// @@protoc_insertion_point(one_of_clear_start:fmsmoov.ProcessorCommand)
  switch (cmd_oneof_case()) {
    case kGainSet: {
      delete cmd_oneof_.gain_set_;
      break;
    }
    case kGainGet: {
      delete cmd_oneof_.gain_get_;
      break;
    }
    case CMD_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CMD_ONEOF_NOT_SET;
}


void ProcessorCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:fmsmoov.ProcessorCommand)
  clear_cmd_oneof();
}

bool ProcessorCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fmsmoov.ProcessorCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .fmsmoov.GainSetCommand gain_set = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gain_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fmsmoov.GainGetCommand gain_get = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gain_get()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fmsmoov.ProcessorCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fmsmoov.ProcessorCommand)
  return false;
#undef DO_
}

void ProcessorCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fmsmoov.ProcessorCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fmsmoov.GainSetCommand gain_set = 1;
  if (has_gain_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *cmd_oneof_.gain_set_, output);
  }

  // .fmsmoov.GainGetCommand gain_get = 2;
  if (has_gain_get()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *cmd_oneof_.gain_get_, output);
  }

  // @@protoc_insertion_point(serialize_end:fmsmoov.ProcessorCommand)
}

::google::protobuf::uint8* ProcessorCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fmsmoov.ProcessorCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fmsmoov.GainSetCommand gain_set = 1;
  if (has_gain_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *cmd_oneof_.gain_set_, deterministic, target);
  }

  // .fmsmoov.GainGetCommand gain_get = 2;
  if (has_gain_get()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *cmd_oneof_.gain_get_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:fmsmoov.ProcessorCommand)
  return target;
}

size_t ProcessorCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fmsmoov.ProcessorCommand)
  size_t total_size = 0;

  switch (cmd_oneof_case()) {
    // .fmsmoov.GainSetCommand gain_set = 1;
    case kGainSet: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cmd_oneof_.gain_set_);
      break;
    }
    // .fmsmoov.GainGetCommand gain_get = 2;
    case kGainGet: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cmd_oneof_.gain_get_);
      break;
    }
    case CMD_ONEOF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessorCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fmsmoov.ProcessorCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessorCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProcessorCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fmsmoov.ProcessorCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fmsmoov.ProcessorCommand)
    MergeFrom(*source);
  }
}

void ProcessorCommand::MergeFrom(const ProcessorCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fmsmoov.ProcessorCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.cmd_oneof_case()) {
    case kGainSet: {
      mutable_gain_set()->::fmsmoov::GainSetCommand::MergeFrom(from.gain_set());
      break;
    }
    case kGainGet: {
      mutable_gain_get()->::fmsmoov::GainGetCommand::MergeFrom(from.gain_get());
      break;
    }
    case CMD_ONEOF_NOT_SET: {
      break;
    }
  }
}

void ProcessorCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fmsmoov.ProcessorCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessorCommand::CopyFrom(const ProcessorCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fmsmoov.ProcessorCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessorCommand::IsInitialized() const {
  return true;
}

void ProcessorCommand::Swap(ProcessorCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProcessorCommand::InternalSwap(ProcessorCommand* other) {
  std::swap(cmd_oneof_, other->cmd_oneof_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProcessorCommand::GetMetadata() const {
  protobuf_fmsmoov_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fmsmoov_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProcessorCommand

// .fmsmoov.GainSetCommand gain_set = 1;
bool ProcessorCommand::has_gain_set() const {
  return cmd_oneof_case() == kGainSet;
}
void ProcessorCommand::set_has_gain_set() {
  _oneof_case_[0] = kGainSet;
}
void ProcessorCommand::clear_gain_set() {
  if (has_gain_set()) {
    delete cmd_oneof_.gain_set_;
    clear_has_cmd_oneof();
  }
}
 const ::fmsmoov::GainSetCommand& ProcessorCommand::gain_set() const {
  // @@protoc_insertion_point(field_get:fmsmoov.ProcessorCommand.gain_set)
  return has_gain_set()
      ? *cmd_oneof_.gain_set_
      : ::fmsmoov::GainSetCommand::default_instance();
}
::fmsmoov::GainSetCommand* ProcessorCommand::mutable_gain_set() {
  if (!has_gain_set()) {
    clear_cmd_oneof();
    set_has_gain_set();
    cmd_oneof_.gain_set_ = new ::fmsmoov::GainSetCommand;
  }
  // @@protoc_insertion_point(field_mutable:fmsmoov.ProcessorCommand.gain_set)
  return cmd_oneof_.gain_set_;
}
::fmsmoov::GainSetCommand* ProcessorCommand::release_gain_set() {
  // @@protoc_insertion_point(field_release:fmsmoov.ProcessorCommand.gain_set)
  if (has_gain_set()) {
    clear_has_cmd_oneof();
    ::fmsmoov::GainSetCommand* temp = cmd_oneof_.gain_set_;
    cmd_oneof_.gain_set_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ProcessorCommand::set_allocated_gain_set(::fmsmoov::GainSetCommand* gain_set) {
  clear_cmd_oneof();
  if (gain_set) {
    set_has_gain_set();
    cmd_oneof_.gain_set_ = gain_set;
  }
  // @@protoc_insertion_point(field_set_allocated:fmsmoov.ProcessorCommand.gain_set)
}

// .fmsmoov.GainGetCommand gain_get = 2;
bool ProcessorCommand::has_gain_get() const {
  return cmd_oneof_case() == kGainGet;
}
void ProcessorCommand::set_has_gain_get() {
  _oneof_case_[0] = kGainGet;
}
void ProcessorCommand::clear_gain_get() {
  if (has_gain_get()) {
    delete cmd_oneof_.gain_get_;
    clear_has_cmd_oneof();
  }
}
 const ::fmsmoov::GainGetCommand& ProcessorCommand::gain_get() const {
  // @@protoc_insertion_point(field_get:fmsmoov.ProcessorCommand.gain_get)
  return has_gain_get()
      ? *cmd_oneof_.gain_get_
      : ::fmsmoov::GainGetCommand::default_instance();
}
::fmsmoov::GainGetCommand* ProcessorCommand::mutable_gain_get() {
  if (!has_gain_get()) {
    clear_cmd_oneof();
    set_has_gain_get();
    cmd_oneof_.gain_get_ = new ::fmsmoov::GainGetCommand;
  }
  // @@protoc_insertion_point(field_mutable:fmsmoov.ProcessorCommand.gain_get)
  return cmd_oneof_.gain_get_;
}
::fmsmoov::GainGetCommand* ProcessorCommand::release_gain_get() {
  // @@protoc_insertion_point(field_release:fmsmoov.ProcessorCommand.gain_get)
  if (has_gain_get()) {
    clear_has_cmd_oneof();
    ::fmsmoov::GainGetCommand* temp = cmd_oneof_.gain_get_;
    cmd_oneof_.gain_get_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ProcessorCommand::set_allocated_gain_get(::fmsmoov::GainGetCommand* gain_get) {
  clear_cmd_oneof();
  if (gain_get) {
    set_has_gain_get();
    cmd_oneof_.gain_get_ = gain_get;
  }
  // @@protoc_insertion_point(field_set_allocated:fmsmoov.ProcessorCommand.gain_get)
}

bool ProcessorCommand::has_cmd_oneof() const {
  return cmd_oneof_case() != CMD_ONEOF_NOT_SET;
}
void ProcessorCommand::clear_has_cmd_oneof() {
  _oneof_case_[0] = CMD_ONEOF_NOT_SET;
}
ProcessorCommand::CmdOneofCase ProcessorCommand::cmd_oneof_case() const {
  return ProcessorCommand::CmdOneofCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProcessorResponse::kResponseFieldNumber;
const int ProcessorResponse::kGainSetFieldNumber;
const int ProcessorResponse::kGainGetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProcessorResponse::ProcessorResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fmsmoov_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fmsmoov.ProcessorResponse)
}
ProcessorResponse::ProcessorResponse(const ProcessorResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  response_ = from.response_;
  clear_has_rsp_oneof();
  switch (from.rsp_oneof_case()) {
    case kGainSet: {
      mutable_gain_set()->::fmsmoov::GainSetResponse::MergeFrom(from.gain_set());
      break;
    }
    case kGainGet: {
      mutable_gain_get()->::fmsmoov::GainGetResponse::MergeFrom(from.gain_get());
      break;
    }
    case RSP_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:fmsmoov.ProcessorResponse)
}

void ProcessorResponse::SharedCtor() {
  response_ = 0;
  clear_has_rsp_oneof();
  _cached_size_ = 0;
}

ProcessorResponse::~ProcessorResponse() {
  // @@protoc_insertion_point(destructor:fmsmoov.ProcessorResponse)
  SharedDtor();
}

void ProcessorResponse::SharedDtor() {
  if (has_rsp_oneof()) {
    clear_rsp_oneof();
  }
}

void ProcessorResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessorResponse::descriptor() {
  protobuf_fmsmoov_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fmsmoov_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProcessorResponse& ProcessorResponse::default_instance() {
  protobuf_fmsmoov_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProcessorResponse* ProcessorResponse::New(::google::protobuf::Arena* arena) const {
  ProcessorResponse* n = new ProcessorResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProcessorResponse::clear_rsp_oneof() {
// @@protoc_insertion_point(one_of_clear_start:fmsmoov.ProcessorResponse)
  switch (rsp_oneof_case()) {
    case kGainSet: {
      delete rsp_oneof_.gain_set_;
      break;
    }
    case kGainGet: {
      delete rsp_oneof_.gain_get_;
      break;
    }
    case RSP_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RSP_ONEOF_NOT_SET;
}


void ProcessorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fmsmoov.ProcessorResponse)
  response_ = 0;
  clear_rsp_oneof();
}

bool ProcessorResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fmsmoov.ProcessorResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .fmsmoov.ResponseCode response = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_response(static_cast< ::fmsmoov::ResponseCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fmsmoov.GainSetResponse gain_set = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gain_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fmsmoov.GainGetResponse gain_get = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gain_get()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fmsmoov.ProcessorResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fmsmoov.ProcessorResponse)
  return false;
#undef DO_
}

void ProcessorResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fmsmoov.ProcessorResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fmsmoov.ResponseCode response = 1;
  if (this->response() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->response(), output);
  }

  // .fmsmoov.GainSetResponse gain_set = 2;
  if (has_gain_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *rsp_oneof_.gain_set_, output);
  }

  // .fmsmoov.GainGetResponse gain_get = 3;
  if (has_gain_get()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *rsp_oneof_.gain_get_, output);
  }

  // @@protoc_insertion_point(serialize_end:fmsmoov.ProcessorResponse)
}

::google::protobuf::uint8* ProcessorResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fmsmoov.ProcessorResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fmsmoov.ResponseCode response = 1;
  if (this->response() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->response(), target);
  }

  // .fmsmoov.GainSetResponse gain_set = 2;
  if (has_gain_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *rsp_oneof_.gain_set_, deterministic, target);
  }

  // .fmsmoov.GainGetResponse gain_get = 3;
  if (has_gain_get()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *rsp_oneof_.gain_get_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:fmsmoov.ProcessorResponse)
  return target;
}

size_t ProcessorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fmsmoov.ProcessorResponse)
  size_t total_size = 0;

  // .fmsmoov.ResponseCode response = 1;
  if (this->response() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->response());
  }

  switch (rsp_oneof_case()) {
    // .fmsmoov.GainSetResponse gain_set = 2;
    case kGainSet: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *rsp_oneof_.gain_set_);
      break;
    }
    // .fmsmoov.GainGetResponse gain_get = 3;
    case kGainGet: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *rsp_oneof_.gain_get_);
      break;
    }
    case RSP_ONEOF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessorResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fmsmoov.ProcessorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessorResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProcessorResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fmsmoov.ProcessorResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fmsmoov.ProcessorResponse)
    MergeFrom(*source);
  }
}

void ProcessorResponse::MergeFrom(const ProcessorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fmsmoov.ProcessorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.response() != 0) {
    set_response(from.response());
  }
  switch (from.rsp_oneof_case()) {
    case kGainSet: {
      mutable_gain_set()->::fmsmoov::GainSetResponse::MergeFrom(from.gain_set());
      break;
    }
    case kGainGet: {
      mutable_gain_get()->::fmsmoov::GainGetResponse::MergeFrom(from.gain_get());
      break;
    }
    case RSP_ONEOF_NOT_SET: {
      break;
    }
  }
}

void ProcessorResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fmsmoov.ProcessorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessorResponse::CopyFrom(const ProcessorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fmsmoov.ProcessorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessorResponse::IsInitialized() const {
  return true;
}

void ProcessorResponse::Swap(ProcessorResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProcessorResponse::InternalSwap(ProcessorResponse* other) {
  std::swap(response_, other->response_);
  std::swap(rsp_oneof_, other->rsp_oneof_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProcessorResponse::GetMetadata() const {
  protobuf_fmsmoov_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fmsmoov_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProcessorResponse

// .fmsmoov.ResponseCode response = 1;
void ProcessorResponse::clear_response() {
  response_ = 0;
}
::fmsmoov::ResponseCode ProcessorResponse::response() const {
  // @@protoc_insertion_point(field_get:fmsmoov.ProcessorResponse.response)
  return static_cast< ::fmsmoov::ResponseCode >(response_);
}
void ProcessorResponse::set_response(::fmsmoov::ResponseCode value) {
  
  response_ = value;
  // @@protoc_insertion_point(field_set:fmsmoov.ProcessorResponse.response)
}

// .fmsmoov.GainSetResponse gain_set = 2;
bool ProcessorResponse::has_gain_set() const {
  return rsp_oneof_case() == kGainSet;
}
void ProcessorResponse::set_has_gain_set() {
  _oneof_case_[0] = kGainSet;
}
void ProcessorResponse::clear_gain_set() {
  if (has_gain_set()) {
    delete rsp_oneof_.gain_set_;
    clear_has_rsp_oneof();
  }
}
 const ::fmsmoov::GainSetResponse& ProcessorResponse::gain_set() const {
  // @@protoc_insertion_point(field_get:fmsmoov.ProcessorResponse.gain_set)
  return has_gain_set()
      ? *rsp_oneof_.gain_set_
      : ::fmsmoov::GainSetResponse::default_instance();
}
::fmsmoov::GainSetResponse* ProcessorResponse::mutable_gain_set() {
  if (!has_gain_set()) {
    clear_rsp_oneof();
    set_has_gain_set();
    rsp_oneof_.gain_set_ = new ::fmsmoov::GainSetResponse;
  }
  // @@protoc_insertion_point(field_mutable:fmsmoov.ProcessorResponse.gain_set)
  return rsp_oneof_.gain_set_;
}
::fmsmoov::GainSetResponse* ProcessorResponse::release_gain_set() {
  // @@protoc_insertion_point(field_release:fmsmoov.ProcessorResponse.gain_set)
  if (has_gain_set()) {
    clear_has_rsp_oneof();
    ::fmsmoov::GainSetResponse* temp = rsp_oneof_.gain_set_;
    rsp_oneof_.gain_set_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ProcessorResponse::set_allocated_gain_set(::fmsmoov::GainSetResponse* gain_set) {
  clear_rsp_oneof();
  if (gain_set) {
    set_has_gain_set();
    rsp_oneof_.gain_set_ = gain_set;
  }
  // @@protoc_insertion_point(field_set_allocated:fmsmoov.ProcessorResponse.gain_set)
}

// .fmsmoov.GainGetResponse gain_get = 3;
bool ProcessorResponse::has_gain_get() const {
  return rsp_oneof_case() == kGainGet;
}
void ProcessorResponse::set_has_gain_get() {
  _oneof_case_[0] = kGainGet;
}
void ProcessorResponse::clear_gain_get() {
  if (has_gain_get()) {
    delete rsp_oneof_.gain_get_;
    clear_has_rsp_oneof();
  }
}
 const ::fmsmoov::GainGetResponse& ProcessorResponse::gain_get() const {
  // @@protoc_insertion_point(field_get:fmsmoov.ProcessorResponse.gain_get)
  return has_gain_get()
      ? *rsp_oneof_.gain_get_
      : ::fmsmoov::GainGetResponse::default_instance();
}
::fmsmoov::GainGetResponse* ProcessorResponse::mutable_gain_get() {
  if (!has_gain_get()) {
    clear_rsp_oneof();
    set_has_gain_get();
    rsp_oneof_.gain_get_ = new ::fmsmoov::GainGetResponse;
  }
  // @@protoc_insertion_point(field_mutable:fmsmoov.ProcessorResponse.gain_get)
  return rsp_oneof_.gain_get_;
}
::fmsmoov::GainGetResponse* ProcessorResponse::release_gain_get() {
  // @@protoc_insertion_point(field_release:fmsmoov.ProcessorResponse.gain_get)
  if (has_gain_get()) {
    clear_has_rsp_oneof();
    ::fmsmoov::GainGetResponse* temp = rsp_oneof_.gain_get_;
    rsp_oneof_.gain_get_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ProcessorResponse::set_allocated_gain_get(::fmsmoov::GainGetResponse* gain_get) {
  clear_rsp_oneof();
  if (gain_get) {
    set_has_gain_get();
    rsp_oneof_.gain_get_ = gain_get;
  }
  // @@protoc_insertion_point(field_set_allocated:fmsmoov.ProcessorResponse.gain_get)
}

bool ProcessorResponse::has_rsp_oneof() const {
  return rsp_oneof_case() != RSP_ONEOF_NOT_SET;
}
void ProcessorResponse::clear_has_rsp_oneof() {
  _oneof_case_[0] = RSP_ONEOF_NOT_SET;
}
ProcessorResponse::RspOneofCase ProcessorResponse::rsp_oneof_case() const {
  return ProcessorResponse::RspOneofCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace fmsmoov

// @@protoc_insertion_point(global_scope)
